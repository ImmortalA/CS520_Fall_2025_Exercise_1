"""Tests for HumanEval/1"""
from __future__ import annotations
from typing import Callable, Tuple



import numpy as np

def is_floats(x) -> bool:
    # check if it is float; List[float]; Tuple[float]
    if isinstance(x, float):
        return True
    if isinstance(x, (list, tuple)):
        return all(isinstance(i, float) for i in x)
    if isinstance(x, np.ndarray):
        return x.dtype == np.float64 or x.dtype == np.float32
    return False


def assertion(out, exp, atol):
    exact_match = out == exp

    if atol == 0 and is_floats(exp):
        atol = 1e-6
    if not exact_match and atol != 0:
        assert np.allclose(out, exp, rtol=1e-07, atol=atol)
    else:
        assert exact_match


def check(candidate):
    inputs
    results
    for i, (inp, exp) in enumerate(zip(inputs, results)):
        assertion(candidate(*inp), exp, 0)


def run_tests(func: Callable) -> Tuple[int, int]:
    """Run HumanEval+ tests for HumanEval/1."""
    try:
        check(func)
        return (1, 1)  # All tests passed
    except AssertionError as e:
        return (0, 1)  # Test failed
    except Exception as e:
        return (0, 1)  # Error
